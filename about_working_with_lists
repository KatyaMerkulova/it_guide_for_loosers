list[]

l = []
1. Add - l.append(x) - add the number to the end of the list  

2. Remove:
2.1 l.remove(x) - remove the first occurrence of a value from the list(x is a element)
2.2 l.pop(x) - remove element by its index(x is an index) 
2.3 l.clear() - remove all elements from the list

3. Merge lists:
l = ['a', 'b', 'c']
m = ['d', 'e', 'f']

m.extend(l) # m = ['a', 'b', 'c', 'd', 'e', 'f']

4.Number of occurrences of an element:
l.count(x) x is the element

example:

def show_films(films):
    for film in range(len(films)):
        print(films[film])
        
def append_film(films):
    new_film = input('give me a new film')
    films.append(new_film)

def remove_film(films, film):
    films.remove(film)
   
films = []
n_films = []
for i in range(5):
    append_film(films)
    append_film(n_films)
    
while True:
    do = int(input("""что нужно сделать?
               1 - показать список фильмов
               2 - добавить фильм
               3 - удалить фильм
               4 - exit"""))
    if do == 1:
             show_films(films)
    elif do == 2:
             append_film(films)
             print("вот обновленный список")
             show_films(films)
    elif do == 3:
             show_films(films)
             film = input("введите название фильма, который нужно удалить")
             remove_film(films, film)
    elif do == 4:
             break
    else:
             print('error. try again')
print('see you later')

5. Remove duplicate elements

5.1 Make a temporary list
test = []
for x in n_films:
    if x not in test:
        test.append(x)
test

5.2 Set() function
n_films = list(set(n_films))
n_films

5.3 Count() function
for x in n_films: 
  if n_films.count(x) > 1: 
      n_films.remove(x)

6. m = list(range(1,3)) #[1,2]

7. List generate - expression, member, iterable.
squares = [x ** 2 for x in range(10)]
print(squares)

squares = [x * 9 for x in 'abcdef']
print(squares)

8. List comprehensions.
 8.1 l = []
    for x in range(10):
        l.append(x ** 2)
 8.2 l = [x ** 2 for x in range(10)]
 8.2 is faster and better than 8.1
 
 example: prices
 
 def get_price(x,y):
    return round(x * (1 + y / 100),2) #round() functions determines the number of decimal places

prices = [1.45, 5.67, 8.91, 6.54, 3.14, 3.45]
first_procent = int(input("1 % "))
second_procent = int(input("2 % "))

prices1 = [get_price(first_procent, i_price) for i_price in prices]

prices2 = [get_price(first_procent, i_price) for i_price in prices1]

print(prices)
print(prices1)
print(prices2)

def square(x):
    return(x ** 2)

a = int(input("A"))
b = int(input("B"))

sq = [square(x) for x in range(a,b)]

print(sq)

s = [x * 4 for x in range(10) if x % 2 != 0]
print(s)
s = [(x ** 2 if x % 2 != 0 else x ** 3) for x in range(10)]
print(s)

import random

fst_c = [random.randint(50, 80) for _ in range(10)]
sec_c = [random.randint(30, 60) for _ in range(10)]
thi_c = [('die' if fst_c[i] + sec_c[i] > 100
          else 'alive') 
         for i in range(10)]

print(fst_c)
print(sec_c)

print(thi_c)

9. List copy and slices
new_s = s[:]

new_s = s[2:7] # for index 2, 3, 4, 5, 6

new_s = s[:5] # 0,1,2,3,4

new_s = s[5:] # 5, 6, 7, 8, ...

9.1 positive step: nws = s[2:6:2]

9.2 negative step: nws = s[::-1] #flip the list

9.3 change list: nws[:3] = [1,1,1] # nws = [1, 1, 1, ....]
                 nws[:3] = [1] # [3, 4, 5, 6, ... ] = [1, 6, ...]

example:

word = list(input("word "))

frst = word[:len(word)//2]
scnd = word[len(word)//2:]

print(frst[::-1] + scnd[::-1])                 
