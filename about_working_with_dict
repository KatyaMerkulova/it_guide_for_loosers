1. Create dict ({}, ':', ',')
dictt = {
  'A' : 32,
  'B' : 45,
  'C' : 56 
}
print(dictt['A']) # 32

example:

iq_dict = {
  'Katya' : 30,
  'Vanya' : 31,
  'Egor'  : 32
}

name = input('whose IQ do you want to know? Give me a name')

if name in iq_dict:
    print(iq_dict[name])
else:
    print('no results found for {0}'.format(name))
    
2. D = dict{} - create a dict

3. Add new element
iq_dict['Greg'] = 1000000000000000

example:

student_str = input('''add inf about student with " "
                    name, surname, university, grades
                    ''')

student_info = student_str.split()

student = dict()
student['name'] = student_info[0]
student['surname'] = student_info[1]
student['university'] = student_info[2]
student['grades'] = []
for i in student_info[4:]:
    student['grades'].append(int(i))
    
for i_info in student:
    print(i_info, ' - ', student[i_info])
    
4. Dict methods

def hist(string):
    sym_dict = dict()
    for sym in string:
        if sym in sym_dict:
            sym_dict[sym] += 1
        else:
            sym_dict[sym] = 1
    return sym_dict

text = input('enter the text ').lower()
hist = hist(text)

# for sym in histogram:
#     print(sym, ' - ', histogram[sym])

4.1 .keys() - returns a list of all keys  
4.2 sorted() - sort ascending

for sym in sorted(hist.keys()):
    print(sym, ' - ', hist[sym])

4.3 .values() - returns a list of all values
4.4 max() - returns max value

print('Max', max(hist.values()))

4.5 .pop(name, key_errors): key_errors - returned if the key isn't in the dist - remove the key
del_hist = [' ', '(', ')', ':', '.', ','] # what needs to be removed
for h in del_hist:
    hist.pop(h)
    
for sym in sorted(hist.keys()):
    print(sym, ' - ', hist[sym])
    
4.6 .update() - update dict
example:

d1 = {
  'Katya' : 30,
  'Vanya' : 31,
  'Egor'  : 10000
}

d2 = {
  'Katt' : 67,
  'Vann' : 45,
  'Egorr': 10
}

d1.update(d2)
print(d1)

4.7 .get() - get value by key
d2 = {
  'Katt' : 67,
  'Vann' : 45,
  'Egorr': 10
}
print(d2.get('Katt'))

example1:
data = dict()
data['server'] = {
    'local': '127.0.0.1',
    'port': '10'
}

data['configuration'] = {
    'ssh': '127.0.0.1',
    'passsword': '12345'
}

for d in data:
    for id in data[d]:
        print(id, ' ', data[d][id])
        
        
print(data['server']['port'])        
print(data['configuration']['ssh'])
data['configuration']['ssh'] = '124'
print(data['configuration']['ssh'])

example2:
#1 goog method like a skillbox teacher 
teams = {
    1 : {'name':'NNN', 'age': 20},
    2 : {'name':'nnn', 'age': 28 },
    3 : {'name':'mmm', 'age': 29 },
    4 : {'name':'MMM', 'age': 21 }
}
for team in teams.values():
    if team['name'] == 'NNN' and team['age'] == 20:
        print(team['name'])
    else:
        print('little')
#2 not goog but i did so
teams = {
    1 : {'name':'NNN', 'age': 20},
    2 : {'name':'nnn', 'age': 28 },
    3 : {'name':'mmm', 'age': 29 },
    4 : {'name':'MMM', 'age': 21 }
}

for team in teams:
    if teams[team]['name'] == 'nNN' and teams[team]['age'] == 20:
        print(teams[team]['name'])
    else:
        print('little')
        
4.8 set() function - create a set {}
example: unique numbers
import random #without set()
numbers_list = [random.randint(1,5) for _ in range(10)]
numb = []
for num in numbers_list:
    if num not in numb:
        numb.append(num)
print(numbers_list)
print(numb)

#with set()
unic = set(numbers_list)
print(unic)

    4.8.1 intersection sets{}
    set1 = {1, 2, 3, 4, 5, 6, 7, 8}
    set2 = {12, 3, 4, 15, 16, 17, 18}
    print(set1.intersection(set2))
    #or
    print(set1 & set2)
    
    4.8.2.union sets {}
    print(set1.union(set2))
    #or
    print(set1 | set2)
    
    4.8.3 set1 - set2
    print(set1.difference(set2))
    #or
    print(set1 - set2)
